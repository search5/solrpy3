--- test_all.py	(original)
+++ test_all.py	(refactored)
@@ -5,14 +5,21 @@
 
 Meant to be run against Solr 1.2+.
 """
+from __future__ import division
 
 # stdlib
-import cPickle
+from future import standard_library
+standard_library.install_aliases()
+from builtins import str
+from builtins import range
+from builtins import object
+from past.utils import old_div
+import pickle
 import pickle
 import socket
 import datetime
 import unittest
-import httplib
+import http.client
 from string import digits
 from random import choice
 from xml.dom.minidom import parseString
@@ -713,7 +720,7 @@
         # queries also return score for each document.
 
         for result in results:
-            fields = result.keys()
+            fields = list(result.keys())
             fields.remove(field_to_return)
 
             # Now there should only a score field
@@ -1087,7 +1094,7 @@
         # solrpy 0.1
         self.assertTrue(
             str(query_timestamp.microsecond).startswith(microsecond))
-        self.assertTrue(query_timestamp.microsecond/int(microsecond) == 1000)
+        self.assertTrue(old_div(query_timestamp.microsecond,int(microsecond)) == 1000)
 
     def test_facet_field(self):
         """ Test basic facet fields and make sure they are included in the
@@ -1305,13 +1312,13 @@
         response = self.query(self.conn, q="id:" + id)
         # here we also check the type of the attribute
         expected_attrs = {
-            "numFound": long,
-            "start": long,
+            "numFound": int,
+            "start": int,
             "maxScore": float,
             "header": dict,
             }
 
-        for attr, attr_type in expected_attrs.items():
+        for attr, attr_type in list(expected_attrs.items()):
             self.assertTrue(hasattr(response, attr),
                 "Attribute %s not found in response. id:%s" % (attr, id))
 
@@ -1406,7 +1413,7 @@
     def __call__(self, *args, **kwargs):
         self.calls += 1
         if self.max is None or self.calls <= self.max:
-            raise httplib.BadStatusLine('Dummy status line exception')
+            raise http.client.BadStatusLine('Dummy status line exception')
         return self.wrap(*args, **kwargs)
 
 
@@ -1422,7 +1429,7 @@
         and still raises the exception """
         t = ThrowBadStatusLineExceptions(self.conn)
 
-        self.assertRaises(httplib.BadStatusLine, self.query,
+        self.assertRaises(http.client.BadStatusLine, self.query,
                           self.conn, "user_id:12345")
 
         self.assertEqual(t.calls, 4)
